import React, { useState, useEffect } from 'react'
import './MentalTest.css'
import { motion, AnimatePresence } from 'framer-motion'

interface MentalTestProps {
  onComplete: (results: any) => void
}

interface Question {
  id: number;
  text: string;
  category: 'general' | 'stress' | 'anxiety' | 'sleep' | 'energy' | 'satisfaction';
  options: { value: number; text: string }[];
  condition?: {
    questionId: number;
    values: number[];
  };
}

const MentalTest: React.FC<MentalTestProps> = ({ onComplete }) => {
  const [currentStep, setCurrentStep] = useState(1)
  const [answers, setAnswers] = useState<Record<number, number>>({})
  const [loading, setLoading] = useState(false)
  const [userProfile, setUserProfile] = useState<'general' | 'stress' | 'anxiety' | 'sleep'>('general')
  const [activeQuestions, setActiveQuestions] = useState<Question[]>([])
  const [testStarted, setTestStarted] = useState(false)
  const [selectedProfile, setSelectedProfile] = useState<string | null>(null)

  // Base de questions Ã©tendue avec catÃ©gories et conditions
  const allQuestions: Question[] = [
    // Questions gÃ©nÃ©rales (toujours posÃ©es)
    {
      id: 1,
      category: 'general',
      text: "Ã€ quelle frÃ©quence vous sentez-vous dÃ©passÃ©(e) par vos responsabilitÃ©s quotidiennes ?",
      options: [
        { value: 1, text: "Jamais" },
        { value: 2, text: "Rarement" },
        { value: 3, text: "Parfois" },
        { value: 4, text: "Souvent" },
        { value: 5, text: "TrÃ¨s souvent" }
      ]
    },
    {
      id: 2,
      category: 'sleep',
      text: "Comment Ã©valueriez-vous votre qualitÃ© de sommeil au cours du dernier mois ?",
      options: [
        { value: 5, text: "TrÃ¨s mauvaise" },
        { value: 4, text: "Mauvaise" },
        { value: 3, text: "Moyenne" },
        { value: 2, text: "Bonne" },
        { value: 1, text: "TrÃ¨s bonne" }
      ]
    },
    {
      id: 3,
      category: 'anxiety',
      text: "Ã€ quelle frÃ©quence ressentez-vous de l'anxiÃ©tÃ© ou de l'inquiÃ©tude ?",
      options: [
        { value: 1, text: "Jamais" },
        { value: 2, text: "Rarement" },
        { value: 3, text: "Parfois" },
        { value: 4, text: "Souvent" },
        { value: 5, text: "TrÃ¨s souvent" }
      ]
    },
    
    // Questions de base (toujours posÃ©es)
    {
      id: 4,
      category: 'stress',
      text: "Dans quelle mesure vous sentez-vous capable de gÃ©rer votre stress ?",
      options: [
        { value: 1, text: "TrÃ¨s capable" },
        { value: 2, text: "Capable" },
        { value: 3, text: "Moyennement capable" },
        { value: 4, text: "Peu capable" },
        { value: 5, text: "Pas du tout capable" }
      ]
    },
    
    // Questions conditionnelles pour le stress
    {
      id: 5,
      category: 'stress',
      text: "Quelles situations dÃ©clenchent le plus souvent votre stress ?",
      condition: { questionId: 4, values: [3, 4, 5] },
      options: [
        { value: 3, text: "Situations professionnelles" },
        { value: 3, text: "Relations personnelles" },
        { value: 3, text: "Finances" },
        { value: 3, text: "SantÃ©" },
        { value: 3, text: "Autre" }
      ]
    },
    {
      id: 6,
      category: 'stress',
      text: "Comment votre corps rÃ©agit-il au stress ? (SymptÃ´me principal)",
      condition: { questionId: 4, values: [3, 4, 5] },
      options: [
        { value: 3, text: "Tensions musculaires" },
        { value: 4, text: "Maux de tÃªte" },
        { value: 4, text: "ProblÃ¨mes digestifs" },
        { value: 5, text: "Palpitations cardiaques" },
        { value: 3, text: "Fatigue extrÃªme" }
      ]
    },
    
    // Questions conditionnelles pour l'anxiÃ©tÃ©
    {
      id: 7,
      category: 'anxiety',
      text: "Votre anxiÃ©tÃ© est-elle liÃ©e Ã  des situations spÃ©cifiques ou gÃ©nÃ©ralisÃ©e ?",
      condition: { questionId: 3, values: [3, 4, 5] },
      options: [
        { value: 2, text: "Situations trÃ¨s spÃ©cifiques uniquement" },
        { value: 3, text: "Quelques situations spÃ©cifiques" },
        { value: 4, text: "Plusieurs domaines de ma vie" },
        { value: 5, text: "GÃ©nÃ©ralisÃ©e Ã  la plupart des situations" }
      ]
    },
    {
      id: 8,
      category: 'anxiety',
      text: "Avez-vous dÃ©jÃ  eu des attaques de panique ?",
      condition: { questionId: 3, values: [3, 4, 5] },
      options: [
        { value: 1, text: "Jamais" },
        { value: 3, text: "Une ou deux fois dans ma vie" },
        { value: 4, text: "Occasionnellement" },
        { value: 5, text: "RÃ©guliÃ¨rement" }
      ]
    },
    
    // Questions conditionnelles pour le sommeil
    {
      id: 9,
      category: 'sleep',
      text: "Quel est votre principal problÃ¨me de sommeil ?",
      condition: { questionId: 2, values: [3, 4, 5] },
      options: [
        { value: 3, text: "DifficultÃ© Ã  s'endormir" },
        { value: 4, text: "RÃ©veils nocturnes frÃ©quents" },
        { value: 3, text: "RÃ©veil trop matinal" },
        { value: 5, text: "Sommeil non rÃ©parateur" },
        { value: 2, text: "Horaires de sommeil irrÃ©guliers" }
      ]
    },
    {
      id: 10,
      category: 'sleep',
      text: "Utilisez-vous des Ã©crans (tÃ©lÃ©phone, ordinateur, TV) dans l'heure prÃ©cÃ©dant le coucher ?",
      condition: { questionId: 2, values: [3, 4, 5] },
      options: [
        { value: 1, text: "Jamais" },
        { value: 2, text: "Rarement" },
        { value: 3, text: "Parfois" },
        { value: 4, text: "Souvent" },
        { value: 5, text: "SystÃ©matiquement" }
      ]
    },
    
    // Questions gÃ©nÃ©rales (toujours posÃ©es)
    {
      id: 11,
      category: 'energy',
      text: "Comment Ã©valueriez-vous votre niveau d'Ã©nergie gÃ©nÃ©ral ?",
      options: [
        { value: 1, text: "TrÃ¨s Ã©levÃ©" },
        { value: 2, text: "Ã‰levÃ©" },
        { value: 3, text: "Moyen" },
        { value: 4, text: "Bas" },
        { value: 5, text: "TrÃ¨s bas" }
      ]
    },
    {
      id: 12,
      category: 'general',
      text: "Ã€ quelle frÃ©quence vous sentez-vous irritable ou de mauvaise humeur ?",
      options: [
        { value: 1, text: "Jamais" },
        { value: 2, text: "Rarement" },
        { value: 3, text: "Parfois" },
        { value: 4, text: "Souvent" },
        { value: 5, text: "TrÃ¨s souvent" }
      ]
    },
    {
      id: 13,
      category: 'satisfaction',
      text: "Dans quelle mesure vous sentez-vous satisfait(e) de votre vie actuelle ?",
      options: [
        { value: 1, text: "TrÃ¨s satisfait(e)" },
        { value: 2, text: "Satisfait(e)" },
        { value: 3, text: "Ni satisfait(e) ni insatisfait(e)" },
        { value: 4, text: "Insatisfait(e)" },
        { value: 5, text: "TrÃ¨s insatisfait(e)" }
      ]
    },
    
    // Questions conditionnelles pour l'Ã©nergie
    {
      id: 14,
      category: 'energy',
      text: "Votre fatigue s'amÃ©liore-t-elle aprÃ¨s une bonne nuit de sommeil ?",
      condition: { questionId: 11, values: [3, 4, 5] },
      options: [
        { value: 1, text: "Oui, complÃ¨tement" },
        { value: 2, text: "Oui, partiellement" },
        { value: 3, text: "Pas vraiment" },
        { value: 5, text: "Pas du tout" }
      ]
    },
    {
      id: 15,
      category: 'energy',
      text: "Avez-vous remarquÃ© une baisse de motivation pour des activitÃ©s que vous aimiez auparavant ?",
      condition: { questionId: 11, values: [3, 4, 5] },
      options: [
        { value: 1, text: "Pas du tout" },
        { value: 2, text: "LÃ©gÃ¨rement" },
        { value: 3, text: "ModÃ©rÃ©ment" },
        { value: 4, text: "ConsidÃ©rablement" },
        { value: 5, text: "ComplÃ¨tement" }
      ]
    }
  ];

  // Profils prÃ©dÃ©finis pour le questionnaire
  const profiles = [
    {
      id: 'general',
      name: 'Ã‰valuation gÃ©nÃ©rale',
      description: 'Une Ã©valuation complÃ¨te de votre bien-Ãªtre mental global.',
      icon: 'ðŸ§ '
    },
    {
      id: 'stress',
      name: 'Gestion du stress',
      description: 'ConcentrÃ© sur votre niveau de stress et vos mÃ©canismes d\'adaptation.',
      icon: 'ðŸ˜“'
    },
    {
      id: 'anxiety',
      name: 'AnxiÃ©tÃ©',
      description: 'Ã‰value spÃ©cifiquement vos niveaux d\'anxiÃ©tÃ© et leurs impacts.',
      icon: 'ðŸ˜°'
    },
    {
      id: 'sleep',
      name: 'QualitÃ© du sommeil',
      description: 'Analyse vos habitudes de sommeil et leur influence sur votre bien-Ãªtre.',
      icon: 'ðŸ˜´'
    }
  ];

  // DÃ©terminer les questions actives en fonction des rÃ©ponses prÃ©cÃ©dentes
  useEffect(() => {
    if (!testStarted) return;
    
    let questions: Question[] = [];
    
    // Ajouter les questions de base selon le profil sÃ©lectionnÃ©
    if (userProfile === 'general') {
      // Pour le profil gÃ©nÃ©ral, inclure toutes les questions de base
      questions = allQuestions.filter(q => !q.condition);
    } else {
      // Pour les profils spÃ©cifiques, inclure les questions gÃ©nÃ©rales et celles de la catÃ©gorie
      questions = allQuestions.filter(q => 
        !q.condition && (q.category === 'general' || q.category === userProfile)
      );
    }
    
    // Ajouter les questions conditionnelles si les conditions sont remplies
    allQuestions.forEach(question => {
      if (question.condition) {
        const { questionId, values } = question.condition;
        if (
          answers[questionId] !== undefined && 
          values.includes(answers[questionId]) &&
          (userProfile === 'general' || question.category === userProfile)
        ) {
          questions.push(question);
        }
      }
    });
    
    // Trier les questions par ID pour maintenir l'ordre
    questions.sort((a, b) => a.id - b.id);
    
    setActiveQuestions(questions);
  }, [answers, userProfile, testStarted]);

  const handleProfileSelect = (profileId) => {
    setSelectedProfile(profileId);
  };

  const startTest = () => {
    if (!selectedProfile) return;
    
    setUserProfile(selectedProfile as any);
    setTestStarted(true);
    setCurrentStep(1);
    setAnswers({});
  };

  const handleAnswer = (questionId, value) => {
    setAnswers({
      ...answers,
      [questionId]: value
    });
  };

  const handleNext = () => {
    if (currentStep < activeQuestions.length) {
      setCurrentStep(currentStep + 1);
    } else {
      // Calculer les rÃ©sultats
      setLoading(true);
      setTimeout(() => {
        // Calculer le score total en fonction des rÃ©ponses
        const answerValues = Object.values(answers) as number[];
        const totalScore = answerValues.reduce((sum, val) => sum + val, 0);
        const maxScore = activeQuestions.length * 5;
        
        const stressScore = Math.round((totalScore / maxScore) * 100);
        const wellbeingScore = 100 - stressScore;
        
        // Calculer des scores spÃ©cifiques pour chaque catÃ©gorie
        const calculateCategoryScore = (category) => {
          const categoryQuestions = activeQuestions.filter(q => q.category === category);
          if (categoryQuestions.length === 0) return 50; // Valeur par dÃ©faut
          
          let categoryScore = 0;
          let questionCount = 0;
          
          categoryQuestions.forEach(q => {
            if (answers[q.id] !== undefined) {
              categoryScore += answers[q.id];
              questionCount++;
            }
          });
          
          return questionCount > 0 
            ? Math.round((categoryScore / (questionCount * 5)) * 100) 
            : 50;
        };
        
        const results = {
          stress: calculateCategoryScore('stress'),
          wellbeing: wellbeingScore,
          anxiety: calculateCategoryScore('anxiety'),
          sleep: calculateCategoryScore('sleep'),
          energy: calculateCategoryScore('energy'),
          satisfaction: calculateCategoryScore('satisfaction'),
          profile: userProfile,
          recommendations: getRecommendations(stressScore, userProfile)
        };
        
        setLoading(false);
        onComplete(results);
      }, 2000);
    }
  };

  const handlePrevious = () => {
    if (currentStep > 1) {
      setCurrentStep(currentStep - 1);
    }
  };

  const getRecommendations = (stressScore, profile) => {
    // Recommandations de base selon le niveau de stress
    let baseRecommendations = [];
    
    if (stressScore >= 80) {
      baseRecommendations = [
        "Consultez un professionnel de la santÃ© mentale dÃ¨s que possible",
        "Pratiquez des exercices de respiration profonde quotidiennement",
        "RÃ©duisez votre charge de travail si possible",
        "Accordez-vous des moments de dÃ©tente chaque jour"
      ];
    } else if (stressScore >= 60) {
      baseRecommendations = [
        "IntÃ©grez une pratique rÃ©guliÃ¨re de mÃ©ditation",
        "AmÃ©liorez votre hygiÃ¨ne de sommeil",
        "Pratiquez une activitÃ© physique modÃ©rÃ©e 3 fois par semaine",
        "Limitez votre consommation de cafÃ©ine et d'alcool"
      ];
    } else if (stressScore >= 40) {
      baseRecommendations = [
        "Maintenez une activitÃ© physique rÃ©guliÃ¨re",
        "Pratiquez la pleine conscience au quotidien",
        "Entretenez vos relations sociales positives",
        "Adoptez une alimentation Ã©quilibrÃ©e"
      ];
    } else {
      baseRecommendations = [
        "Continuez vos bonnes pratiques de gestion du stress",
        "Partagez vos stratÃ©gies avec votre entourage",
        "Restez attentif Ã  votre Ã©quilibre vie professionnelle/personnelle",
        "CÃ©lÃ©brez vos rÃ©ussites et votre bien-Ãªtre"
      ];
    }
    
    // Recommandations spÃ©cifiques selon le profil
    let profileRecommendations = [];
    
    switch (profile) {
      case 'stress':
        profileRecommendations = [
          "Essayez la technique de respiration 4-7-8 pour calmer rapidement votre systÃ¨me nerveux",
          "Identifiez vos dÃ©clencheurs de stress et Ã©laborez des stratÃ©gies spÃ©cifiques",
          "Pratiquez des activitÃ©s qui vous procurent de la joie rÃ©guliÃ¨rement"
        ];
        break;
      case 'anxiety':
        profileRecommendations = [
          "Tenez un journal d'anxiÃ©tÃ© pour identifier les schÃ©mas et dÃ©clencheurs",
          "Pratiquez des exercices de respiration abdominale lors des moments d'anxiÃ©tÃ©",
          "Essayez la mÃ©ditation guidÃ©e spÃ©cifique Ã  l'anxiÃ©tÃ© dans notre Centre de Bien-Ãªtre"
        ];
        break;
      case 'sleep':
        profileRecommendations = [
          "Ã‰tablissez une routine de sommeil rÃ©guliÃ¨re, mÃªme les week-ends",
          "Ã‰vitez les Ã©crans au moins une heure avant le coucher",
          "CrÃ©ez un environnement de sommeil optimal : frais, sombre et calme",
          "Essayez notre exercice de relaxation progressive avant de vous coucher"
        ];
        break;
      default:
        profileRecommendations = [
          "Ã‰quilibrez votre temps entre travail, relations sociales et loisirs",
          "Pratiquez la gratitude quotidiennement",
          "Explorez diffÃ©rentes techniques de bien-Ãªtre dans notre Centre de Bien-Ãªtre"
        ];
    }
    
    // Combiner les recommandations
    return [...baseRecommendations, ...profileRecommendations];
  };

  // Si le test n'a pas encore commencÃ©, afficher la sÃ©lection de profil
  if (!testStarted) {
    return (
      <section className="mental-test-section section dark:bg-gray-900 dark:text-white">
        <div className="container">
          <div className="mental-test-header">
            <h2>Test de bien-Ãªtre mental personnalisÃ©</h2>
            <p>Choisissez le type d'Ã©valuation qui correspond le mieux Ã  vos besoins actuels.</p>
          </div>
          
          <div className="profile-selection">
            {profiles.map(profile => (
              <div 
                key={profile.id}
                className={`profile-card ${selectedProfile === profile.id ? 'selected' : ''} dark:bg-gray-800 dark:hover:bg-gray-700`}
                onClick={() => handleProfileSelect(profile.id)}
              >
                <div className="profile-icon">{profile.icon}</div>
                <h3>{profile.name}</h3>
                <p>{profile.description}</p>
              </div>
            ))}
          </div>
          
          <div className="test-start-action">
            <button 
              className="btn btn-primary dark:bg-indigo-600 dark:hover:bg-indigo-700"
              onClick={startTest}
              disabled={!selectedProfile}
            >
              Commencer le test
            </button>
          </div>
        </div>
      </section>
    );
  }

  // Si le test est en cours
  const currentQuestion = activeQuestions[currentStep - 1];
  const isAnswered = currentQuestion && answers[currentQuestion.id] !== undefined;

  return (
    <section className="mental-test-section section dark:bg-gray-900 dark:text-white">
      <div className="container">
        <div className="mental-test-header">
          <h2>Test de bien-Ãªtre mental</h2>
          <p>RÃ©pondez honnÃªtement aux questions suivantes pour Ã©valuer votre niveau de bien-Ãªtre mental.</p>
        </div>
        
        {loading ? (
          <div className="loading-container dark:bg-gray-800">
            <div className="loading-spinner"></div>
            <p>Analyse de vos rÃ©ponses en cours...</p>
          </div>
        ) : (
          <div className="test-container dark:bg-gray-800">
            <div className="progress-container">
              <div className="progress-bar dark:bg-gray-700">
                <div 
                  className="progress-fill dark:bg-indigo-600" 
                  style={{ width: `${(currentStep / activeQuestions.length) * 100}%` }}
                ></div>
              </div>
              <p className="progress-text">Question {currentStep} sur {activeQuestions.length}</p>
            </div>
            
            <AnimatePresence mode="wait">
              <motion.div 
                key={currentStep}
                className="question-container"
                initial={{ opacity: 0, x: 50 }}
                animate={{ opacity: 1, x: 0 }}
                exit={{ opacity: 0, x: -50 }}
                transition={{ duration: 0.3 }}
              >
                <h3>Question {currentStep}</h3>
                <p className="question-text">{currentQuestion?.text}</p>
                
                <div className="options-container">
                  {currentQuestion?.options.map((option) => (
                    <div 
                      key={option.value}
                      className={`option ${answers[currentQuestion.id] === option.value ? 'selected' : ''} dark:bg-gray-700 dark:hover:bg-gray-600`}
                      onClick={() => handleAnswer(currentQuestion.id, option.value)}
                    >
                      {option.text}
                    </div>
                  ))}
                </div>
              </motion.div>
            </AnimatePresence>
            
            <div className="test-navigation">
              {currentStep > 1 && (
                <button 
                  className="btn btn-secondary dark:bg-gray-700 dark:hover:bg-gray-600" 
                  onClick={handlePrevious}
                >
                  PrÃ©cÃ©dent
                </button>
              )}
              <button 
                className="btn btn-primary dark:bg-indigo-600 dark:hover:bg-indigo-700" 
                onClick={handleNext}
                disabled={!isAnswered}
              >
                {currentStep === activeQuestions.length ? 'Terminer le test' : 'Suivant'}
              </button>
            </div>
          </div>
        )}
      </div>
    </section>
  );
};

export default MentalTest;
